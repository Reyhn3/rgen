using System;
using FakeItEasy;
using NUnit.Framework;
using Shouldly;


namespace RGen.Domain.Tests;

public class MathUtilsTests
{
	[Test]
	public void CountNumberOfDecimalDigits_should_return_1_for_value_0() =>
		MathUtils.CountNumberOfDecimalDigits(0).ShouldBe(1);

	[TestCase(1, 1)]
	[TestCase(1, 9)]
	[TestCase(2, 10)]
	[TestCase(2, 99)]
	[TestCase(3, 100)]
	[TestCase(3, 999)]
	[TestCase(4, 1000)]
	[TestCase(4, 9999)]
	[TestCase(5, 10000)]
	[TestCase(5, 99999)]
	[TestCase(6, 100000)]
	[TestCase(6, 999999)]
	[TestCase(7, 1000000)]
	[TestCase(7, 9999999)]
	[TestCase(8, 10000000)]
	[TestCase(8, 99999999)]
	[TestCase(9, 100000000)]
	[TestCase(9, 999999999)]
	[TestCase(10, 1000000000)]
	[TestCase(10, int.MaxValue)]
	public void CountNumberOfDecimalDigits_for_int_should_return_the_correct_number_of_decimal_digits_for_positive_values(int expected, int value) =>
		MathUtils.CountNumberOfDecimalDigits(value).ShouldBe(expected);

	[TestCase(1, 1)]
	[TestCase(1, 9)]
	[TestCase(2, 10)]
	[TestCase(2, 99)]
	[TestCase(3, 100)]
	[TestCase(3, 999)]
	[TestCase(4, 1000)]
	[TestCase(4, 9999)]
	[TestCase(5, 10000)]
	[TestCase(5, 99999)]
	[TestCase(6, 100000)]
	[TestCase(6, 999999)]
	[TestCase(7, 1000000)]
	[TestCase(7, 9999999)]
	[TestCase(8, 10000000)]
	[TestCase(8, 99999999)]
	[TestCase(9, 100000000)]
	[TestCase(9, 999999999)]
	[TestCase(10, 1000000000)]
	[TestCase(10, 9999999999)]
	[TestCase(11, 10000000000)]
	[TestCase(11, 99999999999)]
	[TestCase(12, 100000000000)]
	[TestCase(12, 999999999999)]
	[TestCase(13, 1000000000000)]
	[TestCase(13, 9999999999999)]
	[TestCase(14, 10000000000000)]
	[TestCase(14, 99999999999999)]
	[TestCase(15, 100000000000000)]
	[TestCase(15, 999999999999999)]
	[TestCase(16, 1000000000000000)]
	[TestCase(16, 9999999999999999)]
	[TestCase(17, 10000000000000000)]
	[TestCase(17, 99999999999999999)]
	[TestCase(18, 100000000000000000)]
	[TestCase(18, 999999999999999999)]
	[TestCase(19, 1000000000000000000)]
	[TestCase(19, long.MaxValue)]
	public void CountNumberOfDecimalDigits_for_long_should_return_the_correct_number_of_decimal_digits_for_positive_values(int expected, long value) =>
		MathUtils.CountNumberOfDecimalDigits(value).ShouldBe(expected);

	[TestCase(2, -1)]
	[TestCase(2, -9)]
	[TestCase(3, -10)]
	[TestCase(3, -99)]
	[TestCase(4, -100)]
	[TestCase(4, -999)]
	[TestCase(5, -1000)]
	[TestCase(5, -9999)]
	[TestCase(6, -10000)]
	[TestCase(6, -99999)]
	[TestCase(7, -100000)]
	[TestCase(7, -999999)]
	[TestCase(8, -1000000)]
	[TestCase(8, -9999999)]
	[TestCase(9, -10000000)]
	[TestCase(9, -99999999)]
	[TestCase(10, -100000000)]
	[TestCase(10, -999999999)]
	[TestCase(11, -1000000000)]
	[TestCase(11, int.MinValue)]
	public void CountNumberOfDecimalDigits_for_int_should_return_the_correct_number_of_decimal_digits_for_negative_values(int expected, int value) =>
		MathUtils.CountNumberOfDecimalDigits(value).ShouldBe(expected);

	[TestCase(2, -1)]
	[TestCase(2, -9)]
	[TestCase(3, -10)]
	[TestCase(3, -99)]
	[TestCase(4, -100)]
	[TestCase(4, -999)]
	[TestCase(5, -1000)]
	[TestCase(5, -9999)]
	[TestCase(6, -10000)]
	[TestCase(6, -99999)]
	[TestCase(7, -100000)]
	[TestCase(7, -999999)]
	[TestCase(8, -1000000)]
	[TestCase(8, -9999999)]
	[TestCase(9, -10000000)]
	[TestCase(9, -99999999)]
	[TestCase(10, -100000000)]
	[TestCase(10, -999999999)]
	[TestCase(11, -1000000000)]
	[TestCase(11, -9999999999)]
	[TestCase(12, -10000000000)]
	[TestCase(12, -99999999999)]
	[TestCase(13, -100000000000)]
	[TestCase(13, -999999999999)]
	[TestCase(14, -1000000000000)]
	[TestCase(14, -9999999999999)]
	[TestCase(15, -10000000000000)]
	[TestCase(15, -99999999999999)]
	[TestCase(16, -100000000000000)]
	[TestCase(16, -999999999999999)]
	[TestCase(17, -1000000000000000)]
	[TestCase(17, -9999999999999999)]
	[TestCase(18, -10000000000000000)]
	[TestCase(18, -99999999999999999)]
	[TestCase(19, -100000000000000000)]
	[TestCase(19, -999999999999999999)]
	[TestCase(20, -1000000000000000000)]
	[TestCase(20, long.MinValue)]
	public void CountNumberOfDecimalDigits_for_long_should_return_the_correct_number_of_decimal_digits_for_negative_values(int expected, long value) =>
		MathUtils.CountNumberOfDecimalDigits(value).ShouldBe(expected);
}